package util

import (
	"github.com/BurntSushi/toml"
)

// LastCheckInfo https://xuri.me/toml-to-go/
type LastCheckInfo struct {
	Service       Service             `toml:"service"`
	Package       map[string]PackInfo `toml:"package"`
	Directory     map[string]DirInfo  `toml:"directory"`
	Ulimits       Ulimits             `toml:"ulimit"`
	AutoGenerated AutoGenerated
}

// Off service off状态
type Off struct {
	State int      `toml:"state"`
	Label string   `toml:"label"`
	Name  []string `toml:"name"`
}

// On service on 状态
type On struct {
	State int      `toml:"state"`
	Label string   `toml:"label"`
	Name  []string `toml:"name"`
}

// Service 服务器服务
type Service struct {
	Off Off `toml:"off"`
	On  On  `toml:"on"`
}

// PackInfo yum,pip,perl 信息
type PackInfo struct {
	State int      `toml:"state"`
	Label string   `toml:"label"`
	Name  []string `toml:"name"`
}

// DirInfo 目录信息
type DirInfo struct {
	State  int    `toml:"state"`
	Action string `toml:"action"`
	Path   string `toml:"path"`
	Mode   int64  `toml:"mode"`
	Owner  string `toml:"owner"`
}

// Soft Ulimit 的soft信息
type Soft struct {
	Domain string `toml:"domain"`
	Type   string `toml:"type"`
	Item   string `toml:"item"`
	Value  string `toml:"value"`
}

// Hard Ulimit 的hard信息
type Hard struct {
	Domain string `toml:"domain"`
	Type   string `toml:"type"`
	Item   string `toml:"item"`
	Value  string `toml:"value"`
}

// Core Ulimit core size
type Core struct {
	State int  `toml:"state"`
	Soft  Soft `toml:"soft"`
	Hard  Hard `toml:"hard"`
}

// Nofile Ulimit的最大打开文件数
type Nofile struct {
	State int  `toml:"state"`
	Soft  Soft `toml:"soft"`
	Hard  Hard `toml:"hard"`
}

// Nproc Ulimit 用户最大进程数
type Nproc struct {
	State int  `toml:"state"`
	Soft  Soft `toml:"soft"`
	Hard  Hard `toml:"hard"`
}

// Ulimit 信息
type Ulimits struct {
	Core   Core   `toml:"core"`
	Nofile Nofile `toml:"nofile"`
	Nproc  Nproc  `toml:"nproc"`
}

// SysCtlInfo内核参数结构体
type AutoGenerated struct {
	Kernel []Kernel `toml:"kernel"`
	VM     []VM     `toml:"vm"`
	Net    []Net    `toml:"net"`
	Fs     []Fs     `toml:"fs"`
	Abi    []Abi    `toml:"abi"`
	Crypto []Crypto `toml:"crypto"`
	Sunrpc []Sunrpc `toml:"sunrpc"`
	User   []User   `toml:"user"`
}
type Kernel struct {
	State int    `toml:"state,omitempty"`
	Name  string `toml:"name,omitempty"`
	Value string `toml:"value,omitempty"`
}
type VM struct {
	State int    `toml:"state,omitempty"`
	Name  string `toml:"name,omitempty"`
	Value string `toml:"value,omitempty"`
}
type Net struct {
	State int    `toml:"state,omitempty"`
	Name  string `toml:"name,omitempty"`
	Value string `toml:"value,omitempty"`
}
type Fs struct {
	State int    `toml:"state,omitempty"`
	Name  string `toml:"name,omitempty"`
	Value string `toml:"value,omitempty"`
}
type Abi struct {
	State int    `toml:"state,omitempty"`
	Name  string `toml:"name,omitempty"`
	Value string `toml:"value,omitempty"`
}
type Crypto struct {
	State int    `toml:"state,omitempty"`
	Name  string `toml:"name,omitempty"`
	Value string `toml:"value,omitempty"`
}
type Sunrpc struct {
	State int    `toml:"state,omitempty"`
	Name  string `toml:"name,omitempty"`
	Value string `toml:"value,omitempty"`
}
type User struct {
	Satte int    `toml:"satte,omitempty"`
	Name  string `toml:"name,omitempty"`
	Value string `toml:"value,omitempty"`
}

// GetService 获取service区域方法
func (l *LastCheckInfo) GetService() (int, string, []string, int, string, []string) {
	offState := l.Service.Off.State
	offLabel := l.Service.Off.Label
	offName := l.Service.Off.Name
	onState := l.Service.On.State
	onLabel := l.Service.On.Label
	onName := l.Service.On.Name
	return offState, offLabel, offName, onState, onLabel, onName
}

//GetPackage 获取Package区域方法
func (l *LastCheckInfo) GetPackage() (int, string, []string, int, string, []string, int, string, []string) {
	yumState := l.Package["yum"].State
	yumLabel := l.Package["yum"].Label
	yumName := l.Package["yum"].Name

	pipState := l.Package["pip"].State
	pipLabel := l.Package["pip"].Label
	pipName := l.Package["pip"].Name

	perlState := l.Package["perl"].State
	perlLabel := l.Package["perl"].Label
	perlName := l.Package["perl"].Name
	return yumState, yumLabel, yumName, pipState, pipLabel, pipName, perlState, perlLabel, perlName
}

//GetDirectory 获取directory区域方法
func (l *LastCheckInfo) GetDirectory() map[string]DirInfo {
	return l.Directory
}

// GetUlimit
func (l *LastCheckInfo) GetUlimit() *Ulimits {
	return &l.Ulimits
}

//解析toml
func LastParse(fp string) (*LastCheckInfo, error) {
	var lastconfig LastCheckInfo
	_, err := toml.DecodeFile(fp, &lastconfig)
	if err != nil {
		return nil, err
	}
	return &lastconfig, nil
}
